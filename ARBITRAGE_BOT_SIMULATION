#Simple Arbitrage Bot Simulator. You can play with the numbers to find possible trades. 

import os
import requests
import random
import pandas as pd
import time
from dotenv import load_dotenv

# Load API keys from .env file
load_dotenv("api_key.env")

# API keys (stored in .env for security)
COINBASE_API_KEY = os.getenv("COINBASE_API_KEY")
CRYPTOCOM_API_KEY = os.getenv("CRYPTOCOM_API_KEY")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# Define trading fee per exchange (0.35% assumed)
TRADING_FEE = 0.75
TRADE_AMOUNT = 100  # Max trade size 100

# API Endpoints
EXCHANGES = {
    "Coinbase": "https://api.coinbase.com/api/v3/brokerage",
    "Crypto.com": "https://api.crypto.com/v2/public/get-ticker",
    "Gemini": "https://api.gemini.com/v1/pubticker"
}

# Fetch prices from Coinbase (Authenticated Request)
def fetch_coinbase_prices():
    headers = {"Authorization": f"Bearer {COINBASE_API_KEY}"}
    url = f"{EXCHANGES['Coinbase']}/market/products"

    try:
        response = requests.get(url, headers=headers)
        data = response.json()
        print("Coinbase API Response:", data)  # Debugging print

        prices = {}
        if "products" in data:  # Ensure the correct key exists
            for pair in data["products"]:
                if "USD" in pair["product_id"]:
                    bid = float(pair.get("bid", 0))
                    ask = float(pair.get("ask", 0))
                    prices[pair["product_id"]] = {"bid": bid, "ask": ask}
        return prices
    except Exception as e:
        print(f"Error fetching Coinbase prices: {e}")
    return {}

# Fetch prices from Crypto.com with improved error handling
def fetch_crypto_com_prices():
    try:
        response = requests.get(EXCHANGES["Crypto.com"], timeout=5)
        data = response.json()
        print("Crypto.com API Response:", data)  # Debugging print

        prices = {}
        if "result" in data and "data" in data["result"]:
            if isinstance(data["result"]["data"], list):  # Ensure it's a list
                for pair in data["result"]["data"]:
                    symbol = pair.get("i", "")  # Get trading pair symbol
                    if "USD" in symbol:  # Ensure it's a USD pair
                        bid = float(pair.get("b", 0) or 0)
                        ask = float(pair.get("k", 0) or 0)
                        prices[symbol] = {"bid": bid, "ask": ask}
            else:
                print("Unexpected structure in Crypto.com API response.")
        return prices
    except requests.exceptions.Timeout:
        print("Crypto.com API request timed out!")
    except Exception as e:
        print(f"Error fetching Crypto.com prices: {e}")
    return {}

# Fetch prices from Gemini (Updated for better error handling)
def fetch_gemini_prices():
    pairs = ["btcusd", "ethusd", "solusd", "xrpusd", "ltcusd"]
    prices = {}

    for pair in pairs:
        try:
            response = requests.get(f"{EXCHANGES['Gemini']}/{pair}")
            data = response.json()
            if "bid" in data and "ask" in data:
                prices[pair.upper()] = {"bid": float(data["bid"]), "ask": float(data["ask"])}
        except Exception as e:
            print(f"Error fetching Gemini prices for {pair}: {e}")
    return prices

# Identify arbitrage opportunities
def find_arbitrage(exchange1, exchange2, exchange3):
    opportunities = []
    exchanges = {"Exchange 1": exchange1, "Exchange 2": exchange2, "Exchange 3": exchange3}

    for pair in exchange1.keys():
        if pair in exchange2 and pair in exchange3:
            for buy_exchange, buy_prices in exchanges.items():
                for sell_exchange, sell_prices in exchanges.items():
                    if buy_exchange != sell_exchange and pair in buy_prices and pair in sell_prices:
                        buy_price = buy_prices[pair]["ask"]
                        sell_price = sell_prices[pair]["bid"]

                        if buy_price > 0 and sell_price > buy_price:
                            buy_cost = TRADE_AMOUNT / buy_price
                            buy_cost_after_fees = buy_cost * (1 - TRADING_FEE)

                            sell_revenue = buy_cost_after_fees * sell_price
                            sell_revenue_after_fees = sell_revenue * (1 - TRADING_FEE)

                            profit = sell_revenue_after_fees - TRADE_AMOUNT
                            profit_percentage = (profit / TRADE_AMOUNT) * 100

                            if 0.005 <= profit_percentage <= 0.5:
                                opportunities.append({
                                    "Buy Exchange": buy_exchange,
                                    "Sell Exchange": sell_exchange,
                                    "Pair": pair,
                                    "Buy Price": buy_price,
                                    "Sell Price": sell_price,
                                    "Profit ($)": round(profit, 1),
                                    "Profit (%)": round(profit_percentage, 1)
                                })
    return opportunities

# Run the arbitrage simulation continuously every second
def run_arbitrage_simulation():
    try:
        while True:
            time.sleep(random.uniform(1, 3))  # Add a small delay before API requests
            coinbase_prices = fetch_coinbase_prices()
            crypto_com_prices = fetch_crypto_com_prices()
            gemini_prices = fetch_gemini_prices()

            print("Coinbase Prices:", coinbase_prices)
            print("Crypto.com Prices:", crypto_com_prices)
            print("Gemini Prices:", gemini_prices)

            arbitrage_opportunities = find_arbitrage(coinbase_prices, crypto_com_prices, gemini_prices)

            df = pd.DataFrame(arbitrage_opportunities)
            if not df.empty:
                print("Profitable Arbitrage Opportunities:")
                print(df)
                df.to_csv("arbitrage_results.csv", mode='a', index=False, header=False)
            else:
                print("No profitable arbitrage opportunities found at this time.")

            time.sleep(1)  # Run every second

    except KeyboardInterrupt:
        print("\n[INFO] Script stopped manually. Exiting gracefully...")


# Run the simulation
if __name__ == "__main__":
    run_arbitrage_simulation()
